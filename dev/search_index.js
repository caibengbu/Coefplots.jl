var documenterSearchIndex = {"docs":
[{"location":"manual/quick_start/#Quick-Start","page":"Quick Start","title":"Quick Start","text":"","category":"section"},{"location":"manual/quick_start/#Plotting-directly-from-regression","page":"Quick Start","title":"Plotting directly from regression","text":"","category":"section"},{"location":"manual/quick_start/","page":"Quick Start","title":"Quick Start","text":"We use the Iris dataset from RDatasets.jl to demonstrate the basic usage of Coefplots.jl","category":"page"},{"location":"manual/quick_start/","page":"Quick Start","title":"Quick Start","text":"The quickest way to plot a coefplot is to invoke plot().","category":"page"},{"location":"manual/quick_start/","page":"Quick Start","title":"Quick Start","text":"using Coefplots\nusing RDatasets\nusing GLM\ndf = dataset(\"datasets\", \"iris\");\nregression_result = lm(@formula(SepalLength ~ SepalWidth + PetalLength + PetalWidth), df)\np = plot(regression_result)\n\nsavefigs(\"quick_start1\", p) # hide","category":"page"},{"location":"manual/quick_start/","page":"Quick Start","title":"Quick Start","text":"[.pdf], [generated .tex]","category":"page"},{"location":"manual/quick_start/","page":"Quick Start","title":"Quick Start","text":"(Image: )","category":"page"},{"location":"manual/quick_start/","page":"Quick Start","title":"Quick Start","text":"You can also customize your coefplot by passing named arguments. For example, ","category":"page"},{"location":"manual/quick_start/","page":"Quick Start","title":"Quick Start","text":"p = plot(regression_result; keepcoef = [\"SepalWidth\", \"PetalLength\", \"PetalWidth\"], # drop intercept\n                            title = Label(content=\"My OLS regression\"), # add title\n                            xlabel = Label(content=\"Coefficients\"), # add xlabel\n                            ylabel = Label(content=\"Regressor Names\"), # add ylabel\n                            width = 250, # set width of the axis\n                            height = 180, # set height\n                            keepconnect = true, # connect consecutive coefficients\n                            level = 0.9, # confidence level, the default is 0.95.\n                            vertical = false, # default is true\n                            mark = Mark(mark=:\"triangle*\", marksize=4, linewidth=0)) # aesthetics\n\nsavefigs(\"quick_start2\", p) # hide","category":"page"},{"location":"manual/quick_start/","page":"Quick Start","title":"Quick Start","text":"[.pdf], [generated .tex]","category":"page"},{"location":"manual/quick_start/","page":"Quick Start","title":"Quick Start","text":"(Image: )","category":"page"},{"location":"manual/quick_start/","page":"Quick Start","title":"Quick Start","text":"Apart from directly calling plot(), one can also invoke parse() to convert regression object to a Coefplot object. This allows users to deal with the plot with more flexibility, especially on combining plots.","category":"page"},{"location":"manual/quick_start/","page":"Quick Start","title":"Quick Start","text":"using FixedEffectModels\nregression_withFE = reg(df, @formula(SepalLength ~ SepalWidth + PetalLength + PetalWidth + fe(Species)));\ncoefplots_withfe = parse(regression_withFE; title=Label(content=\"OLS\"))\ncoefplots_pool = parse(regression_result; keepcoef = [\"SepalWidth\", \"PetalLength\", \"PetalWidth\"], title=Label(content=\"with species FE\"))\nm = MultiCoefplot(coefplots_withfe, coefplots_pool; title = Label(content=\"My combined Coefplots\"),\n                                                    xlabel = Label(content=\"Regressor Names\"),\n                                                    ylabel = Label(content=\"Coefficients\"),\n                                                    note = Note(content=\"This is my note.\"))\np = plot(m)\n\nsavefigs(\"quick_start3\", p) # hide","category":"page"},{"location":"manual/quick_start/","page":"Quick Start","title":"Quick Start","text":"[.pdf], [generated .tex]","category":"page"},{"location":"manual/quick_start/","page":"Quick Start","title":"Quick Start","text":"(Image: )","category":"page"},{"location":"manual/quick_start/#Plotting-from-DataFrame","page":"Quick Start","title":"Plotting from DataFrame","text":"","category":"section"},{"location":"manual/quick_start/","page":"Quick Start","title":"Quick Start","text":"In order for Coefplots.jl to learn what to plot from a DataFrame, the DataFrame needs to contain the following columns: [:varname, :b, :se, :dof] (:dof is constant across rows while others should vary). ","category":"page"},{"location":"manual/quick_start/","page":"Quick Start","title":"Quick Start","text":"using DataFrames\ndf = DataFrame(varname = [\"x1\", \"x2\", \"x3\"],\n               b = [1, 2, 3],\n               se = [0.1, 0.2, 0.3],\n               dof = 10)\nc = Coefplot(df)\np = plot(c)\n\nsavefigs(\"quick_start4\", p) # hide","category":"page"},{"location":"manual/quick_start/","page":"Quick Start","title":"Quick Start","text":"[.pdf], [generated .tex]","category":"page"},{"location":"manual/quick_start/","page":"Quick Start","title":"Quick Start","text":"(Image: )","category":"page"},{"location":"manual/quick_start/#Save-Plots","page":"Quick Start","title":"Save Plots","text":"","category":"section"},{"location":"manual/quick_start/","page":"Quick Start","title":"Quick Start","text":"Coefplots.jl uses the same mechanisms for saving plots as PGFPlotsX.jl. You can export your plots to various formats such as PDF, SVG, and TeX. You can either export by calling Coefplots.pgfsave (not exported) or PGFPlotsX.pgfsave","category":"page"},{"location":"manual/quick_start/","page":"Quick Start","title":"Quick Start","text":"For more details on exporting plots, refer to the PGFPlotsX.jl documentation.","category":"page"},{"location":"manual/multi_dimension/#Plot-Combination","page":"Plot Combination","title":"Plot Combination","text":"","category":"section"},{"location":"manual/multi_dimension/","page":"Plot Combination","title":"Plot Combination","text":"There are four types of plots in Coefplots.jl: Coefplot, MultiCoefplot, GroupedCoefplot, GroupedMultiCoefplot. ","category":"page"},{"location":"manual/multi_dimension/#MultiCoefplot","page":"Plot Combination","title":"MultiCoefplot","text":"","category":"section"},{"location":"manual/multi_dimension/","page":"Plot Combination","title":"Plot Combination","text":"We continue the example in quick start. We have also ready seen MultiCoefplot() in the previous chapter.","category":"page"},{"location":"manual/multi_dimension/","page":"Plot Combination","title":"Plot Combination","text":"m = MultiCoefplot(coefplots_withfe, coefplots_pool; title = Label(content=\"My combined Coefplots\"),\n                                                    xlabel = Label(content=\"Regressor Names\"),\n                                                    ylabel = Label(content=\"Coefficients\"),\n                                                    note = Note(content=\"This is my note.\"))\n\nm_plot = plot(m)\n\nsavefigs(\"md1\", m_plot) # hide","category":"page"},{"location":"manual/multi_dimension/","page":"Plot Combination","title":"Plot Combination","text":"[.pdf], [generated .tex]","category":"page"},{"location":"manual/multi_dimension/","page":"Plot Combination","title":"Plot Combination","text":"(Image: )","category":"page"},{"location":"manual/multi_dimension/#GroupedCoefplot","page":"Plot Combination","title":"GroupedCoefplot","text":"","category":"section"},{"location":"manual/multi_dimension/","page":"Plot Combination","title":"Plot Combination","text":"We also provide method GroupedCoefplot() to plot Coefplot objects side by side","category":"page"},{"location":"manual/multi_dimension/","page":"Plot Combination","title":"Plot Combination","text":"g = GroupedCoefplot(\"OLS\" => coefplots_pool, \"FE\" => coefplots_withfe; \n    title = Label(content=\"My combined Coefplots\"),\n    ylabel = Label(content=\"Coefficients\"),\n    width = 350)\n\ng_plot = plot(g)\nsavefigs(\"md2\", g_plot) # hide","category":"page"},{"location":"manual/multi_dimension/","page":"Plot Combination","title":"Plot Combination","text":"[.pdf], [generated .tex]","category":"page"},{"location":"manual/multi_dimension/","page":"Plot Combination","title":"Plot Combination","text":"(Image: )","category":"page"},{"location":"manual/multi_dimension/","page":"Plot Combination","title":"Plot Combination","text":"Not limited to plot multiple regressions, GroupedCoefplot() can also divide the coefficients in a single regression into multiple groups however the user wants. To make this happen, we first extract the regression results in DataFrame form,","category":"page"},{"location":"manual/multi_dimension/","page":"Plot Combination","title":"Plot Combination","text":"df = deepcopy(coefplots_pool.data) # extract the regression results from Coefplot object\ndf","category":"page"},{"location":"manual/multi_dimension/","page":"Plot Combination","title":"Plot Combination","text":"we add our categorization (it doesn't have to be called coefgroup), use DataFrames.jl's groupby() to produce a GroupedDataFrame, and then plug it in our GroupedCoefplot() method.","category":"page"},{"location":"manual/multi_dimension/","page":"Plot Combination","title":"Plot Combination","text":"df.coefgroup = [\"Width Related\", \"Length Related\", \"Width Related\"]\ngrouped_df = groupby(df, [:coefgroup])\ng2 = GroupedCoefplot(grouped_df; title = Label(content=\"My combined Coefplots\"),\n                                 ylabel = Label(content=\"Coefficients\"),\n                                 width = 200)\n\ng2_plot = plot(g2)\nsavefigs(\"md3\", g2_plot) # hide","category":"page"},{"location":"manual/multi_dimension/","page":"Plot Combination","title":"Plot Combination","text":"[.pdf], [generated .tex]","category":"page"},{"location":"manual/multi_dimension/","page":"Plot Combination","title":"Plot Combination","text":"(Image: )","category":"page"},{"location":"manual/multi_dimension/#GroupedMultiCoefplot","page":"Plot Combination","title":"GroupedMultiCoefplot","text":"","category":"section"},{"location":"manual/multi_dimension/","page":"Plot Combination","title":"Plot Combination","text":"This type is reserved for scenarios when the user wants to have side-by-side plots and also overlapping plots. One can achieve this by plug in Pair{Any, MultiCoefplot} ... or Pair{Any, GroupedCoefplots} ... when invoking GroupedMultiCoefplot(). For example,","category":"page"},{"location":"manual/multi_dimension/","page":"Plot Combination","title":"Plot Combination","text":"df = deepcopy(coefplots_withfe.data)\ndf.coefgroup = [\"Width Related\", \"Length Related\", \"Width Related\"]\ngrouped_df = groupby(df, [:coefgroup])\ng3 = GroupedCoefplot(grouped_df)\n\ngmc = GroupedMultiCoefplot(\"OLS\" => g2, \"FE\" => g3; show_legend=[false, true], # which subplot should show their legend\n                                                    legend = Coefplots.Legend(at=(0.98,0.02), \n                                                                              anchor = Symbol(\"south east\")))\n\ngmc_plot = plot(gmc)\nsavefigs(\"gmc\", gmc_plot) # hide","category":"page"},{"location":"manual/multi_dimension/","page":"Plot Combination","title":"Plot Combination","text":"[.pdf], [generated .tex]","category":"page"},{"location":"manual/multi_dimension/","page":"Plot Combination","title":"Plot Combination","text":"(Image: )","category":"page"},{"location":"manual/appearence/#Appearence","page":"Appearence","title":"Appearence","text":"","category":"section"},{"location":"manual/appearence/#Colors-and-mark-shapes","page":"Appearence","title":"Colors and mark shapes","text":"","category":"section"},{"location":"manual/appearence/","page":"Appearence","title":"Appearence","text":"Coefplots.jl uses Colors.jl to manage the coloring of the plots. Colors.jl supports a variety of colorspaces. Colors.jl also provides a wide variety of named colors to choose from, see here for more information. ","category":"page"},{"location":"manual/appearence/","page":"Appearence","title":"Appearence","text":"The default color for Coefplot is the Julia logo blue. For MultiCoefplot and GroupedMultiCoefplot, Coefplots.jl iterates over Julia blue, Julia green, Julia red, Julia purple and restart if reaches the end. ","category":"page"},{"location":"manual/appearence/","page":"Appearence","title":"Appearence","text":"Colorable components in Coefplots.jl are Mark, Bar. Color these objects simply by passing a Color to named arguments fill or draw (fill doesn't work for Bar). ","category":"page"},{"location":"manual/appearence/","page":"Appearence","title":"Appearence","text":"The Mark object that gets passed to Coefplot.mark defines the style in which Coefplots.jl draw the point estimate, while Coefplot.errormark defines the the style of the endpoints of the confidence interval. The Bar object that gets passed to Coefplot.errorbar defines the style of the confidence interval, while Coefplot.connect defines the style of the line that connects consecutive coefficients if keepconnect is true.","category":"page"},{"location":"manual/appearence/","page":"Appearence","title":"Appearence","text":"The user can choose from a variety of mark shapes.","category":"page"},{"location":"manual/appearence/","page":"Appearence","title":"Appearence","text":"mark preview mark preview\nmark=\"*\" (Image: ) mark=\"x\" (Image: )\nmark=\"+\" (Image: ) mark=\"-\" (Image: )\nmark=\"|\" (Image: ) mark=\"asterisk\" (Image: )\nmark=\"star\" (Image: ) mark=\"10-pointed star\" (Image: )\nmark=\"oplus\" (Image: ) mark=\"oplus*\" (Image: )\nmark=\"otimes\" (Image: ) mark=\"otimes*\" (Image: )\nmark=\"square\" (Image: ) mark=\"square*\" (Image: )\nmark=\"triangle\" (Image: ) mark=\"triangle*\" (Image: )\nmark=\"diamond\" (Image: ) mark=\"diamond*\" (Image: )\nmark=\"pentagon\" (Image: ) mark=\"pentagon*\" (Image: )\nmark=\"halfcircle\" (Image: ) mark=\"halfcircle*\" (Image: )\nmark=\"halfdiamond*\" (Image: ) mark=\"halfsquare*\" (Image: )\nmark=\"halfsquare right*\" (Image: ) mark=\"halfsquare left*\" (Image: )\nmark=\"Mercedes star\" (Image: ) mark=\"Mercedes star flipped\" (Image: )\nmark=\"heart\" (Image: ) mark=\"ball\" (Image: )","category":"page"},{"location":"manual/appearence/","page":"Appearence","title":"Appearence","text":"For example, ","category":"page"},{"location":"manual/appearence/","page":"Appearence","title":"Appearence","text":"using Colors\ncoefplots_pool = parse(regression_result, mark=Mark(mark=\"heart\", marksize=3, fill=colorant\"salmon\", draw=colorant\"#FF0000\"),\n                                          errorbar=Bar(linewidth=2, linetype=Symbol(\"densely dotted\"), draw=colorant\"lightsalmon\"),\n                                          errormark=Mark(mark=:|, marksize=3.0, linewidth=0.8, linetype=:solid, draw=colorant\"firebrick2\"),\n                                          connect=Bar(draw=colorant\"lightsalmon\"),\n                                                    keepconnect=true)\n\np = plot(coefplots_pool)\n\nsavefigs(\"a1\", p) # hide","category":"page"},{"location":"manual/appearence/","page":"Appearence","title":"Appearence","text":"[.pdf], [generated .tex]","category":"page"},{"location":"manual/appearence/","page":"Appearence","title":"Appearence","text":"(Image: )","category":"page"},{"location":"manual/appearence/#Caption-Styles","page":"Appearence","title":"Caption Styles","text":"","category":"section"},{"location":"manual/appearence/","page":"Appearence","title":"Appearence","text":"There are three elements about a caption that can be customized: font, size, and rotate. font dictates the font in which the caption is written in, size determines the font size, and rotate specifies the angle to which the caption is tilted. This can be useful when the caption is long but the intervals between captions are short.","category":"page"},{"location":"manual/appearence/","page":"Appearence","title":"Appearence","text":"coefplots_pool = parse(regression_result, xticklabel=CaptionStyle(font=\"phv\",  # fontcode for Helvetica\n                                                                  size=10,\n                                                                  rotate=45),\n                                          title=Label(content=\"My Title in Helvetica\", \n                                                      captionstyle=CaptionStyle(font=\"phv\")))\n\np = plot(coefplots_pool)\n\nsavefigs(\"a2\", p) # hide","category":"page"},{"location":"manual/appearence/","page":"Appearence","title":"Appearence","text":"[.pdf], [generated .tex]","category":"page"},{"location":"manual/appearence/","page":"Appearence","title":"Appearence","text":"(Image: )","category":"page"},{"location":"manual/appearence/","page":"Appearence","title":"Appearence","text":"Fonts can be accessed with T1 encoding. To list all code installed, check out the documents that pops out after typing texdoc fontname in terminal. Its appendix provides a big list of available fonts.","category":"page"},{"location":"manual/appearence/","page":"Appearence","title":"Appearence","text":"The caption style of title, xlabel, ylabel, xtickstyle, ytickstyle and note can be modified.","category":"page"},{"location":"api/types/#Types","page":"Types","title":"Types","text":"","category":"section"},{"location":"api/types/#Coefplots.Annotation","page":"Types","title":"Coefplots.Annotation","text":"Annotation\n\nConstructors\n\nAnnotation(;angle, content, point_at)\n\nKeyword arguments\n\nangle::Real is the angle of the pointer of the annotation.\ncontent::String is the textual content of the annotation.\npoint_at::Tuple{Real, Real} specifies the location in the axis frame that the annotation should point at. A typical one would be (1, 0), which means that the annotation points at the south-east corner of the axis frame.\n\n\n\n\n\n","category":"type"},{"location":"api/types/#Coefplots.Bar","page":"Types","title":"Coefplots.Bar","text":"Bar\n\nThis enters Coefplot.errbar, Coefplot.connect, and that of Multi-, Grouoped-, GroupedMultiCoefplot.\n\nConstructors\n\nBar(;draw=missing, linewidth=missing, linetype=missing)\n\nKeyword arguments\n\ndraw::Union{Color, Missing} is the color of the bar.\nlinetype::Union{Real, Missing} is the type of line used to draw the bar. Available choices are: \"solid\", \"dotted\", \"densely dotted\", \"loosely dotted\", \"dashed\", \"densely dashed\", \"loosely dashed\", \"dash dot\", \"densely dash dot\", \"loosely dash dot\", \"dash dot dot\", \"densely dash dot dot\", \"loosely dash dot dot\".\nlinewidth::Union{Real, Missing} is the width of line used to draw the bar.\n\n\n\n\n\n","category":"type"},{"location":"api/types/#Coefplots.CaptionStyle","page":"Types","title":"Coefplots.CaptionStyle","text":"CaptionStyle\n\nThis enters Coefplot.xticklabel, Coefplot.yticklabel,  Coefplot.xlabel.captionstyle, Coefplot.ylabel.captionstyle,  Coefplot.title.captionstyle, Coefplot.note.captionstyle.\n\nConstructors\n\nCaptionStyle(;font=missing, size=missing, rotate=missing)\n\nKeyword arguments\n\nfont::Union{Symbol, String, Missing} contains the font's T1 code\nsize::Union{Real, Missing} is the font's size in pt.\nrotate::Union{Real, Missing} is the rotation angle counterclockwise for the caption.\n\n\n\n\n\n","category":"type"},{"location":"api/types/#Coefplots.Coefplot","page":"Types","title":"Coefplots.Coefplot","text":"Coefplot\n\nA Coefplot object. It contains the all information for which a coefplot should be plotted. The keyword arguements of the constructor are all optional.\n\nConstructors\n\nCoefplot(data::AbstractDataFrame; <keyword arguments>)\n\nArguments\n\ntitle::Label: the title to the plot.\nxlabel::Label: the xlabel to the plot.\nylabel::Label: the ylabel to the plot.\nxticklabel::CaptionStyle: the style of the xtick.\nyticklabel::CaptionStyle: the style of the ytick.\nwidth::Real = 240: the width of the axis frame\nheight::Real = 204: the height of the axis frame\nkeepmark::Bool = true: true if the user wants to plot the point estimates, false otherwise.\nkeepconnect::Bool = false: true if the user wants to connect the neighboring point estimates, false otherwise.\nmark::Mark: the style of mark for the point estimates.\nerrormark:Mark: the style of mark for the endpoints of confidence interval.\nerrorbar::Bar: the style of the error bar.\nconnect::Bar: the style of the line that connects the neighboring point estimates.\noffset::Real = 0: similar to that of the Stata package, it shifts the coefplot along the axis that represents coefficient name.\nsorter::Vector{String} = String[]: a vector indicating the content and the order of the coefficients. If empty, use the order of the data.varname.\nlevel::Real = 0.95: the confidence level.\nnote::Union{Note, Missing}: a note that is attached to the south of the plot.\nvertical::Bool = true: if true, the errorbars are parallel to y axis; if false, the errorbars are parallel to x axis.\n\n\n\n\n\n","category":"type"},{"location":"api/types/#Coefplots.GroupedCoefplot","page":"Types","title":"Coefplots.GroupedCoefplot","text":"GroupedCoefplot\n\nA GroupedCoefplot object. It contains the all information for which a grouoped coefplot should be plotted. The keyword arguements of the constructors are all optional.\n\nConstructors\n\nGroupedCoefplot(data::Pair{<:Any, Coefplot}...;  <keyword arguments>)\nGroupedCoefplot(gdata::GroupedDataFrame;  <keyword arguments>)\n\nArguments\n\ntitle::Label: the title to the plot.\nxlabel::Label: the xlabel to the plot.\nylabel::Label: the ylabel to the plot.\nxticklabel::CaptionStyle: the style of the xtick.\nyticklabel::CaptionStyle: the style of the ytick.\nwidth::Real = 240: the width of the axis frame\nheight::Real = 204: the height of the axis frame\nnote::Union{Note, Missing}: a note that is attached to the south of the plot.\nvertical::Bool = true: if true, the errorbars are parallel to y axis; if false, the errorbars are parallel to x axis.\n\n\n\n\n\n","category":"type"},{"location":"api/types/#Coefplots.GroupedMultiCoefplot","page":"Types","title":"Coefplots.GroupedMultiCoefplot","text":"GroupedMultiCoefplot\n\nA GroupedMultiCoefplot object. It contains the all information for which a set of multiple GroupedCoefplots should be plotted together. The keyword arguements of the constructor are all optional.\n\nConstructors\n\nGroupedMultiCoefplot(data::Pair{<:Any, GroupedCoefplot} ...;  <keyword arguments>)\nGroupedMultiCoefplot(data::Pair{<:Any, MultiCoefplot} ...;  <keyword arguments>)\n\nArguments\n\ntitle::Label: the title to the plot.\nxlabel::Label: the xlabel to the plot.\nylabel::Label: the ylabel to the plot.\nxticklabel::CaptionStyle: the style of the xtick.\nyticklabel::CaptionStyle: the style of the ytick.\nshow_legend::Union{Vector{Bool}, Missing} = missing: a boolean vector specifying which legend of the subplot should be shown. The default is to show only the first legend.\nwidth::Real = 240: the width of the axis frame\nheight::Real = 204: the height of the axis frame\ninterval::Union{Real,Missing} = missing: determines the distance between each Coefplot. Each Coefplot's offset is computed according to this.\nnote::Union{Note, Missing}: a note that is attached to the south of the plot.\nvertical::Bool = true: if true, the errorbars are parallel to y axis; if false, the errorbars are parallel to x axis.\n\n\n\n\n\n","category":"type"},{"location":"api/types/#Coefplots.HBand-Tuple{Real, Real}","page":"Types","title":"Coefplots.HBand","text":"HBand([options], ymin, ymax)\n\nA horizontal band from ymin to ymax\n\n\n\n\n\n","category":"method"},{"location":"api/types/#Coefplots.HLine-Tuple{Real}","page":"Types","title":"Coefplots.HLine","text":"HLine([options], y)\n\nA horizontal line at y\n\n\n\n\n\n","category":"method"},{"location":"api/types/#Coefplots.Label","page":"Types","title":"Coefplots.Label","text":"Label\n\nThis enters Coefplot.xlabel, Coefplot.ylabel, and that of Multi-, Grouoped-, GroupedMultiCoefplot.\n\nConstructors\n\nLabel(;content=missing, captionstyle=CaptionStyle())\n\nKeyword arguments\n\ncontent::Union{String, Missing} is the content of the label.\ncaptionstyle::Union{CaptionStyle, Missing} is the font's style in which the label is printed.\n\n\n\n\n\n","category":"type"},{"location":"api/types/#Coefplots.Legend","page":"Types","title":"Coefplots.Legend","text":"Legend\n\nThis enters MultiCoefplot.legend. It determines the style of the legend. The content of the legend is defined by the title of the Coefplot.\n\nConstructors\n\nLegend(;anchor=missing, at=missing, font=missing, size=missing)\n\nKeyword arguments\n\nanchor::Union{Symbol, String, Missing} specifies the anchor of the legend box that is used for alignment. A typical one would be \"north west\".\nat::Any specifies the location in the axis frame that the anchor should adhere to. A typical one would be (1, 0), which means that the anchor is fixed to the south-east corner of the axis frame.\nfont::Union{Symbol, String, Missing} is the font in which the legend should be printed in.\nsize::Union{Real, Missing} is the font size.\n\n\n\n\n\n","category":"type"},{"location":"api/types/#Coefplots.Mark","page":"Types","title":"Coefplots.Mark","text":"Mark\n\nThis enters Coefplot.mark, Coefplot.errormark, and that of Multi-, Grouoped-, GroupedMultiCoefplot.\n\nConstructors\n\nMark(;mark=missing, marksize=missing, linetype=missing, linewidth=missing, fill=missing, draw=missing)\n\nKeyword arguments\n\nmark::Union{Symbol, String, Missing} is the shape of the mark.\nmarksize::Union{Real, Missing} is the size of the mark in pt.\nlinetype::Union{Real, Missing} is the type of line of the outline of the mark. Available choices are: \"solid\", \"dotted\", \"densely dotted\", \"loosely dotted\", \"dashed\", \"densely dashed\", \"loosely dashed\", \"dash dot\", \"densely dash dot\", \"loosely dash dot\", \"dash dot dot\", \"densely dash dot dot\", \"loosely dash dot dot\".\nlinewidth::Union{Real, Missing} is the width of line of the outline of the mark.\nfill::Union{Color, Missing} is the color used to fill the mark\ndraw::Union{Color, Missing} is the color used to draw the outline of the mark.\n\n\n\n\n\n","category":"type"},{"location":"api/types/#Coefplots.MultiCoefplot","page":"Types","title":"Coefplots.MultiCoefplot","text":"MultiCoefplot\n\nA MultiCoefplot object. It contains the all information for which a set of multiple Coefplots should be plotted together. The keyword arguements of the constructor are all optional.\n\nConstructors\n\nMultiCoefplot(data::Coefplot ...; <keyword arguments>)\n\nArguments\n\ntitle::Label: the title to the plot.\nxlabel::Label: the xlabel to the plot.\nylabel::Label: the ylabel to the plot.\nxticklabel::CaptionStyle: the style of the xtick.\nyticklabel::CaptionStyle: the style of the ytick.\nlegend::Legend: the style of the legend.\nwidth::Real = 240: the width of the axis frame\nheight::Real = 204: the height of the axis frame\ninterval::Union{Real,Missing} = missing: determines the distance between each Coefplot. Each Coefplot's offset is computed according to this.\nsorter::Vector{String} = String[]: a vector indicating the content and the order of the coefficients. If empty, use the union of the data.varname of each Coefplot.\ncsorter::Vector{String} = String[]: a vector indicating the order of the coefplots. If empty, use the order of data.\nnote::Union{Note, Missing}: a note that is attached to the south of the plot.\nvertical::Bool = true: if true, the errorbars are parallel to y axis; if false, the errorbars are parallel to x axis.\n\nThe following arguements are from Coefplots(), and will be passed down to each Coefplot if specified in MultiCoefplot().\n\nkeepmark::Bool = true: true if the user wants to plot the point estimates, false otherwise.\nkeepconnect::Bool = false: true if the user wants to connect the neighboring point estimates, false otherwise.\nmark::Mark: the style of mark for the point estimates.\nerrormark:Mark: the style of mark for the endpoints of confidence interval.\nerrorbar::Bar: the style of the error bar.\nconnect::Bar: the style of the line that connects the neighboring point estimates.\noffset::Real = 0: similar to that of the Stata package, it shifts the coefplot along the axis that represents coefficient name.\nsorter::Vector{String} = String[]: a vector indicating the content and the order of the coefficients. If empty, use the order of the data.varname.\nlevel::Real = 0.95: the confidence level.\n\n\n\n\n\n","category":"type"},{"location":"api/types/#Coefplots.Note","page":"Types","title":"Coefplots.Note","text":"Note <: PGFPlotsX.TikzElement\n\nConstructors\n\nNote(;content=missing, anchor=missing ,at=missing, align=missing, captionstyle=missing)\n\nKeyword arguments\n\ncontent::Union{String, Missing} is the content of the note.\nanchor::Union{Symbol, String, Missing} specifies the anchor of the note box that is used for alignment. A typical one would be \"north west\".\nat::Any specifies the location in the axis frame that the anchor should adhere to. A typical one would be (1, 0), which means that the anchor is fixed to the south-east corner of the axis frame.\nalign::Union{Symbol, String, Missing} specifies how the note should be aligned. It could be \"left\", \"right\" or \"center\".\ncaptionstyle::Union{captionstyle, Missing} is the caption style of the note.\n\n\n\n\n\n","category":"type"},{"location":"api/types/#Coefplots.VBand-Tuple{Real, Real}","page":"Types","title":"Coefplots.VBand","text":"VBand([options], xmin, xmax)\n\nA vertical band from xmin to xmax\n\n\n\n\n\n","category":"method"},{"location":"api/types/#Coefplots.VLine-Tuple{Real}","page":"Types","title":"Coefplots.VLine","text":"VLine([options], x)\n\nA vertical line at x\n\n\n\n\n\n","category":"method"},{"location":"api/types/#Coefplots.rHBand-Tuple{Real, Real}","page":"Types","title":"Coefplots.rHBand","text":"rHBand([options], ymin, ymax)\n\nA horizontal band from ymin to ymax, which are relative and range between 0 and 1.\n\n\n\n\n\n","category":"method"},{"location":"api/types/#Coefplots.rHLine-Tuple{Real}","page":"Types","title":"Coefplots.rHLine","text":"rHLine([options], y)\n\nA horizontal line at y, where y takes a real value between 0 and 1 and denotes the relative position of the horizontal line.\n\n\n\n\n\n","category":"method"},{"location":"api/types/#Coefplots.rVBand-Tuple{Real, Real}","page":"Types","title":"Coefplots.rVBand","text":"rVBand([options], xmin, xmax)\n\nA vertical band from xmin to xmax, which are relative and range between 0 and 1.\n\n\n\n\n\n","category":"method"},{"location":"api/types/#Coefplots.rVLine-Tuple{Real}","page":"Types","title":"Coefplots.rVLine","text":"rVLine([options], x)\n\nA vertical line at x, where x takes a real value between 0 and 1 and denotes the relative position of the vertical line.\n\n\n\n\n\n","category":"method"},{"location":"manual/utilities/#Utilities","page":"Utilities","title":"Utilities","text":"","category":"section"},{"location":"manual/utilities/#LaTeX-escaping","page":"Utilities","title":"LaTeX escaping","text":"","category":"section"},{"location":"manual/utilities/","page":"Utilities","title":"Utilities","text":"Charaters like % and & are reserved for special functionalities in LaTeX. In addition, Coefplots.jl uses symbolic coords for regressor names, which further complicates the string escaping situation: parenthesis, commas and periods all need to be escaped. PGFPlotsX.jl uses raw string literal which left these situations unattended. The function latex_escape() will escape these characters so that in the tex output file % is written as \\% (escaped, will not render as the symbol of the begining of comment in TeX), as an example. Coefplots.jl escapes parenthesis, commas and periods by adding a pair of brackets.","category":"page"},{"location":"manual/utilities/","page":"Utilities","title":"Utilities","text":"Coefplots.print_tex(Coefplots.latex_escape(\"%\"))","category":"page"},{"location":"manual/utilities/","page":"Utilities","title":"Utilities","text":"Coefplots.print_tex(Coefplots.latex_escape(\"&\"))","category":"page"},{"location":"manual/utilities/","page":"Utilities","title":"Utilities","text":"Coefplots.print_tex(Coefplots.latex_escape(\"(\"))","category":"page"},{"location":"manual/utilities/","page":"Utilities","title":"Utilities","text":"Coefplots.print_tex(Coefplots.latex_escape(\",\"))","category":"page"},{"location":"manual/utilities/","page":"Utilities","title":"Utilities","text":"latex_escape() can be handy when assembling the Coefplot from a DataFrame. When parse() is invoked on a regression, latex_escape() is automatically called. ","category":"page"},{"location":"manual/utilities/#Coefficient-Sorting","page":"Utilities","title":"Coefficient Sorting","text":"","category":"section"},{"location":"manual/utilities/","page":"Utilities","title":"Utilities","text":"Sort the Coefplot by calling sortcoef!()","category":"page"},{"location":"manual/utilities/","page":"Utilities","title":"Utilities","text":"c = parse(regression_result)\nsortcoef!(c; rev=false)\n\np = plot(c)\nsavefigs(\"sort\", p) # hide","category":"page"},{"location":"manual/utilities/","page":"Utilities","title":"Utilities","text":"[.pdf], [generated .tex]","category":"page"},{"location":"manual/utilities/","page":"Utilities","title":"Utilities","text":"(Image: )","category":"page"},{"location":"manual/utilities/#HLine-and-rHLine-and-their-friends","page":"Utilities","title":"HLine and rHLine and their friends","text":"","category":"section"},{"location":"manual/utilities/","page":"Utilities","title":"Utilities","text":"Coefplots.jl provides its version of HLine, VLine, HBand and VBand which is analogous to those in PGFPlotsX.jl but is compatible with symbolic coords. They can be directly added to the plot by passing them to plot(). Coefplots.jl also allows relative specification of the location in rHLine, rVLine, rHBand, rVBand. ","category":"page"},{"location":"manual/utilities/","page":"Utilities","title":"Utilities","text":"using PGFPlotsX\nhline = @pgf Coefplots.HLine({dashed, red}, 0) # a horizontal line through point 0 on y axis, which is numerical.\n\nrvband = @pgf rVBand({draw=\"none\", fill=\"yellow\", opacity = 0.4}, 0.25, 0.75) # a vertical band starting at the 1/4 of the total axis width, ending at the 3/4 of the total axis width.\n\np = plot(c, hline, rvband)\nsavefigs(\"addons\", p) # hide","category":"page"},{"location":"manual/utilities/","page":"Utilities","title":"Utilities","text":"[.pdf], [generated .tex]","category":"page"},{"location":"manual/utilities/","page":"Utilities","title":"Utilities","text":"(Image: )","category":"page"},{"location":"manual/utilities/#Annotation","page":"Utilities","title":"Annotation","text":"","category":"section"},{"location":"manual/utilities/","page":"Utilities","title":"Utilities","text":"An Annotation is defined by its content, angle, point_at. point_at is a Tuple{Real, Real} that specifies the relative position of the annotation to the axis.","category":"page"},{"location":"manual/utilities/","page":"Utilities","title":"Utilities","text":"anno = Annotation(content=\"This is my anotation\", point_at=(0.5, 0.5), angle=45)\n# this will add an annotation at the center of \n\np = plot(c, hline, rvband, anno)\nsavefigs(\"addons2\", p) # hide","category":"page"},{"location":"manual/utilities/","page":"Utilities","title":"Utilities","text":"[.pdf], [generated .tex]","category":"page"},{"location":"manual/utilities/","page":"Utilities","title":"Utilities","text":"(Image: )","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: header)","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Coefplots.jl is a Julia package that creates publication quality visualization for regressions. It aims to make available in Julia part of the functionalities of the Stata command coefplot. Coefplots.jl is built on PGFPlotsX.jl, which bridges the backend, LaTeX library pgf, and Julia interface. The figures produced with Coefplots can be previewed in notebooks and IDE's, like julia-vscode and Atom-Juno, thanks to PGFPlotsX.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Coefplots.jl can plot results directly from an estimation object (e.g. of type TableRegressionModel in StatsModels.jl, of type RegressionModel in StatsBase.jl, of type FixedEffectModel in FixedEffectModels.jl and so on) or DataFrame objects that contain estimation results. Results from multiple models or data frames can be combined in a single graph. Coefplots.jl draws markers for point estimates and error bars for confidence intervals. ","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"import Pkg\nPkg.add(\"Coefplots\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Prerequisite Installation\nSimilar to the requirments for PGFPlotsX installation, Coefplots.jl requires a LaTeX installation with the PGFPlots package installed,\npdf2svg to generate or preview figures in svg. \npdftoppm for png figures. For more information of prerequisite installations, please refer to the installation section of PGFPlotsX.jl's documentation.","category":"page"},{"location":"#Gallery","page":"Home","title":"Gallery","text":"","category":"section"},{"location":"#In-a-event-study-scenario","page":"Home","title":"In a event study scenario","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: event_study)","category":"page"},{"location":"#Presenting-multi-dimensional-results","page":"Home","title":"Presenting multi-dimensional results","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: gmc_result)","category":"page"},{"location":"manual/event_study/#Special-Usage:-Event-Study","page":"Special Usage: Event Study","title":"Special Usage: Event Study","text":"","category":"section"},{"location":"manual/event_study/","page":"Special Usage: Event Study","title":"Special Usage: Event Study","text":"In this section, I will demonstrate how to use our pakcage to produce an event study plot. We first create a panel data consisting of 100 individuals and 20 periods.","category":"page"},{"location":"manual/event_study/","page":"Special Usage: Event Study","title":"Special Usage: Event Study","text":"using Coefplots\nusing FixedEffectModels\nusing DataFrames\nusing Random\nRandom.seed!(1234)\n\nN = 100 # 100 individuals\nT = 20 # 20 periods\nidfe = rand(N)\ntimefe = rand(T)\nevent_time = 8 # make the eighth period be the event time\nid = repeat(1:N, inner=T) # generate id\nis_treated = id .< N/2 # make first half of individuals are treated, last half of indivuduals are controls\ntime = Float64.(repeat(1:T, outer=N) .- event_time) # generate time\ntreatment = repeat(rand(N), inner=T) .* is_treated # generate treatment, 0 if obs are controls\nidfe = rand(N)\ntimefe = rand(T)\noutcome = treatment .* (time .> 0) + idfe[id] + timefe[Int.(time .+ event_time)] .+ rand(N*T) # generate outcome, treatment only have an effect after event time\n#add id FE and time FE, also add a noise.\n\ndf = DataFrame(id = id, time = time, outcome = outcome, treatment = treatment)\n@view df[1:10, :]","category":"page"},{"location":"manual/event_study/","page":"Special Usage: Event Study","title":"Special Usage: Event Study","text":"We run our four specifications where we (i) do not have any fixed effects, (ii) include individual fixed effect, (iii) include time fixed effects, and (iv) include both individual and time fixed effect, with the help of FixedEffectModels.jl","category":"page"},{"location":"manual/event_study/","page":"Special Usage: Event Study","title":"Special Usage: Event Study","text":"res_pool = reg(df, @formula(outcome ~ time&treatment + treatment); contrasts = Dict(:time => DummyCoding(base=0)), progress_bar = false); \n\nres_idfe = reg(df, @formula(outcome ~ time&treatment + treatment + fe(id)); contrasts = Dict(:time => DummyCoding(base=0)), progress_bar = false); \n\nres_timefe = reg(df, @formula(outcome ~ time&treatment + treatment + fe(time)); contrasts = Dict(:time => DummyCoding(base=0)), progress_bar = false); \n\nres_both = reg(df, @formula(outcome ~ time&treatment + treatment + fe(time) + fe(id)); contrasts = Dict(:time => DummyCoding(base=0)), progress_bar = false);\n\nnothing # hide","category":"page"},{"location":"manual/event_study/","page":"Special Usage: Event Study","title":"Special Usage: Event Study","text":"The variable names are automatically generated by the regression package of choice. In the case of FixedEffectModels.jl, it looks like something like \"time: -7.0 & treatment\" meaning the interaction term between the time=7.0 dummy and the treatment variable. For this to be plotted with a readable x tick, we define the following vector rename_rule, populated with the rules by which we want to change the variable name:","category":"page"},{"location":"manual/event_study/","page":"Special Usage: Event Study","title":"Special Usage: Event Study","text":"rename_rule = [\"time: -7.0 & treatment\" => \"\\$\\\\leq\\$-7\", \n    \"time: -6.0 & treatment\" => -6,\n    \"time: -5.0 & treatment\" => -5,\n    \"time: -4.0 & treatment\" => -4,\n    \"time: -3.0 & treatment\" => -3,\n    \"time: -2.0 & treatment\" => -2,\n    \"time: -1.0 & treatment\" => -1,\n    \"treatment\" => 0,\n    \"time: 1.0 & treatment\" => 1,\n    \"time: 2.0 & treatment\" => 2,\n    \"time: 3.0 & treatment\" => 3,\n    \"time: 4.0 & treatment\" => 4,\n    \"time: 5.0 & treatment\" => 5,\n    \"time: 6.0 & treatment\" => 6,\n    \"time: 7.0 & treatment\" => 7,\n    \"time: 8.0 & treatment\" => 8,\n    \"time: 9.0 & treatment\" => 9,\n    \"time: 10.0 & treatment\" => 10,\n    \"time: 11.0 & treatment\" => 11,\n    \"time: 12.0 & treatment\" => \"\\$\\\\geq\\$12\"]\n\nnothing # hide","category":"page"},{"location":"manual/event_study/","page":"Special Usage: Event Study","title":"Special Usage: Event Study","text":"On a sidenote, the dollarsign is escaped with a backslash. The backslash is also escaped with a backslash. For more information please see LaTeX escaping.","category":"page"},{"location":"manual/event_study/","page":"Special Usage: Event Study","title":"Special Usage: Event Study","text":"Now, we are ready to call parse() or plot() to get the results from the regression object. ","category":"page"},{"location":"manual/event_study/","page":"Special Usage: Event Study","title":"Special Usage: Event Study","text":"p = plot(res_pool; rename = rename_rule, \n                   keepconnect = true, \n                   title = Label(content=\"no FE\"))\n\nsavefigs(\"esplot1\", p) # hide","category":"page"},{"location":"manual/event_study/","page":"Special Usage: Event Study","title":"Special Usage: Event Study","text":"[.pdf], [generated .tex]","category":"page"},{"location":"manual/event_study/","page":"Special Usage: Event Study","title":"Special Usage: Event Study","text":"(Image: )","category":"page"},{"location":"manual/event_study/","page":"Special Usage: Event Study","title":"Special Usage: Event Study","text":"We can also combine the plots of the different specifications to one single plot.","category":"page"},{"location":"manual/event_study/","page":"Special Usage: Event Study","title":"Special Usage: Event Study","text":"pool = parse(res_pool; rename = rename_rule, \n                       keepconnect = true, \n                       title = Label(content=\"no FE\"))\n\nwith_idfe = parse(res_idfe; rename = rename_rule, \n                            keepconnect = true, \n                            title = Label(content=\"with id FE\"))\n\nwith_timefe = parse(res_timefe; rename = rename_rule, \n                                keepconnect = true,\n                                title = Label(content=\"with time FE\"))\n\nwith_bothfe = parse(res_both; rename = rename_rule, \n                              keepconnect = true,\n                              title = Label(content=\"with id \\\\& time FE\"))\n\nm = Coefplots.MultiCoefplot(pool, with_idfe, with_timefe, with_bothfe;\n                            xticklabel = CaptionStyle(rotate=45, size=6),\n                            legend     = Coefplots.Legend(at=(0.02,0.98), \n                                                          anchor=Symbol(\"north west\"),\n                                                          size=6),\n                            note       = Note(content=\"This is my note.\",\n                                              captionstyle=CaptionStyle(size=6)),\n                            xlabel     = Label(content=\"time relative to event\"),\n                            ylabel     = Label(content=\"coefficient\"),\n                            title      = Label(content=\"My example event study plot\"))\n\np = plot(m)\n\nsavefigs(\"esplot2\", p) # hide","category":"page"},{"location":"manual/event_study/","page":"Special Usage: Event Study","title":"Special Usage: Event Study","text":"[.pdf], [generated .tex]","category":"page"},{"location":"manual/event_study/","page":"Special Usage: Event Study","title":"Special Usage: Event Study","text":"(Image: )","category":"page"},{"location":"api/functions/#Functions","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"api/functions/#Base.maximum-Tuple{Coefplot}","page":"Functions","title":"Base.maximum","text":"maximum(c::Coefplot)\n\nCompute the maximal value that the Coefplot can reach with its error bar.\n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Base.maximum-Tuple{MultiCoefplot}","page":"Functions","title":"Base.maximum","text":"maximum(m::MultiCoefplot)\n\nCompute the maximal value that the MultiCoefplot can reach with its error bar.\n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Base.minimum-Tuple{Coefplot}","page":"Functions","title":"Base.minimum","text":"minimum(c::Coefplot)\n\nCompute the minimal value that the Coefplot can reach with its error bar.\n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Base.minimum-Tuple{MultiCoefplot}","page":"Functions","title":"Base.minimum","text":"minimum(m::MultiCoefplot)\n\nCompute the minimal value that the MultiCoefplot can reach with its error bar.\n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Base.parse-Tuple{StatsAPI.RegressionModel}","page":"Functions","title":"Base.parse","text":"Base.parse(r::SupportedEstimation; \n    rename::Vector{Pair{T,R}} where T<:AbstractString where R=missing, \n    keepcoef::Vector{T} where T<:AbstractString=missing, \n    kwargs...)\n\nThis function takes the regression result and convert it into a Coefplot.  If rename is specified, it will rename the coefficients, and keep them in the order the renameing pairs are specified. If keepcoef is specified, it will filter the coefficients, and keep them in the order they are specified. Named arguements of Coefplot() can also be passed in this function.\n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Base.sort!-Tuple{MultiCoefplot}","page":"Functions","title":"Base.sort!","text":"Base.sort!(m::MultiCoefplot)\n\nsort the vector of Coefplots according to csorter.\n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Coefplots._escape_string","page":"Functions","title":"Coefplots._escape_string","text":"_escape_string(str::AbstractString[, esc]; keep = ())::AbstractString\n_escape_string(io, str::AbstractString[, esc]; keep = ())::Nothing\n\nAlmost the same as the Base.escape_string except that _escape_string() escapes , , (, ), and . by putting it in a pair of brackets.\n\n\n\n\n\n","category":"function"},{"location":"api/functions/#Coefplots._parse-Tuple{StatsAPI.RegressionModel, Array{Pair{T, R}, 1} where {R, T<:AbstractString}}","page":"Functions","title":"Coefplots._parse","text":"_parse(r::SupportedEstimation, ps::Pair{<:AbstractString, <:Any} ...; drop_unmentioned::Bool=true, kwargs...)\n\nThis function takes the regression result and convert it into a Coefplot. ps is how you want to rename the coefficients.  If drop_unmentioned, parse will drop all the unmentioned coefficient in ps in the Coefplot. Named arguements of Coefplot() can also be passed in this function.\n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Coefplots._parse-Tuple{StatsAPI.RegressionModel, Vector{T} where T<:AbstractString}","page":"Functions","title":"Coefplots._parse","text":"_parse(r::SupportedEstimation, ps::Vector{T} where T<:AbstractString; kwargs...)\n\nThis function takes the regression result and convert it into a Coefplot. ps contains what coefficients and in what order the user wants to keep.  Named arguements of Coefplot() can also be passed in this function.\n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Coefplots._parse-Tuple{StatsAPI.RegressionModel}","page":"Functions","title":"Coefplots._parse","text":"_parse(r::SupportedEstimation; kwargs...)\n\nThis function takes the regression result and convert it into a Coefplot. Named arguements of Coefplot() can also be passed in this function.\n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Coefplots.color!-Tuple{Coefplot, ColorTypes.Color}","page":"Functions","title":"Coefplots.color!","text":"color!(c::Coefplot, clr::Color)\n\nReset the color of a Coefplot.\n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Coefplots.errbar_length","page":"Functions","title":"Coefplots.errbar_length","text":"errbar_length(data::AbstractDataFrame, level::Real=0.95)\n\nCompute the length of the error bar for each coefficient.\n\n\n\n\n\n","category":"function"},{"location":"api/functions/#Coefplots.get_axis_options-Tuple{Coefplot}","page":"Functions","title":"Coefplots.get_axis_options","text":"get_axis_options(c::Coefplot)\n\nRenders the properties of a Coefplot object as options of the \\begin{axis}\n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Coefplots.get_axis_options-Tuple{MultiCoefplot}","page":"Functions","title":"Coefplots.get_axis_options","text":"get_axis_options(m::MultiCoefplot)\n\nRenders the properties of a MultiCoefplot object as options of the \\begin{axis}\n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Coefplots.get_groupplot_options-Tuple{GroupedCoefplot}","page":"Functions","title":"Coefplots.get_groupplot_options","text":"get_groupplot_options(g::GroupedCoefplot)\n\nRenders the properties of a GroupedCoefplot object as options of the \\begin{groupplot}\n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Coefplots.get_groupplot_options-Tuple{GroupedMultiCoefplot}","page":"Functions","title":"Coefplots.get_groupplot_options","text":"get_nextgroupplot_options(g::GroupedMultiCoefplot)\n\nRenders the properties of a GroupedMultiCoefplot object as options of the \\begin{groupplot}\n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Coefplots.get_nextgroupplot_options-Tuple{Coefplot}","page":"Functions","title":"Coefplots.get_nextgroupplot_options","text":"get_nextgroupplot_options(c::Coefplot)\n\nRenders the properties of a Coefplot object as options of the \\begin{nextgroupplot}\n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Coefplots.get_nextgroupplot_options-Tuple{MultiCoefplot}","page":"Functions","title":"Coefplots.get_nextgroupplot_options","text":"get_nextgroupplot_options(m::MultiCoefplot)\n\nRenders the properties of a MultiCoefplot object as options of the \\begin{nextgroupplot}\n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Coefplots.get_plot_options-Tuple{Coefplot}","page":"Functions","title":"Coefplots.get_plot_options","text":"get_plot_options(c::Coefplot)\n\nRenders the properties of a Coefplot object as options of the \\addplot\n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Coefplots.latex_escape-Tuple{AbstractString}","page":"Functions","title":"Coefplots.latex_escape","text":"latex_escape(s::AbstractString)\n\nEscapes ,, (, ), and . by putting it in a pair of brackets, also esxapes & and % by adding \\\n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Coefplots.sortcoef!-Tuple{Coefplot}","page":"Functions","title":"Coefplots.sortcoef!","text":"sortcoef!(c::Coefplot; rev::Bool=false)\n\nSort the coefficient in ascending or descending order. Both c.data and c.sorter is modified.\n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Coefplots.to_axis-Tuple{Coefplot, Vararg{Union{Annotation, HBand, HLine, VBand, VLine, rHBand, rHLine, rVBand, rVLine}}}","page":"Functions","title":"Coefplots.to_axis","text":"to_axis(c::Coefplot, other::SupportedAddition ...)\n\nConverts the Coefplot object to a PGFPlotsX.Axis object. Other supported components are allowed and appended after the Coefplot within the axis. \n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Coefplots.to_axis-Tuple{GroupedCoefplot, Vararg{Union{Annotation, HBand, HLine, VBand, VLine, rHBand, rHLine, rVBand, rVLine}}}","page":"Functions","title":"Coefplots.to_axis","text":"to_axis(g::GroupedCoefplot, other::SupportedAddition ...)\n\nConverts the GroupedCoefplot object to a PGFPlotsX.Axis object.  Other supported components are allowed and appended after the GroupedCoefplot within the axis. \n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Coefplots.to_axis-Tuple{GroupedMultiCoefplot, Vararg{Union{Annotation, HBand, HLine, VBand, VLine, rHBand, rHLine, rVBand, rVLine}}}","page":"Functions","title":"Coefplots.to_axis","text":"to_axis(g::GroupedMultiCoefplot, other::SupportedAddition ...)\n\nConverts the GroupedMultiCoefplot object to a PGFPlotsX.Axis object.  Other supported components are allowed and appended after the GroupedMultiCoefplot within the axis. \n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Coefplots.to_axis-Tuple{MultiCoefplot, Vararg{Union{Annotation, HBand, HLine, VBand, VLine, rHBand, rHLine, rVBand, rVLine}}}","page":"Functions","title":"Coefplots.to_axis","text":"to_axis(m::MultiCoefplot, other::SupportedAddition ...)\n\nConverts the MultiCoefplot object to a PGFPlotsX.Axis object.  Other supported components are allowed and appended after the MultiCoefplot within the axis. \n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Coefplots.to_options-Tuple{Bar}","page":"Functions","title":"Coefplots.to_options","text":"to_options(l::Bar)\n\ngenerates tikz options related to bars: [draw={}, draw opacity={}, line width=0.6pt}, densely dotted].\n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Coefplots.to_options-Tuple{CaptionStyle}","page":"Functions","title":"Coefplots.to_options","text":"to_options(l::CaptionStyle)\n\ngenerates PGF options related to caption style: [font={}, rotate={}].\n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Coefplots.to_options-Tuple{Label, Symbol, Symbol}","page":"Functions","title":"Coefplots.to_options","text":"to_options(l::Label, label::Symbol, label_style::Symbol)\n\ngenerates PGF options related to label: [label={}, label_style={font={}, rotate={}}].\n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Coefplots.to_options-Tuple{Legend}","page":"Functions","title":"Coefplots.to_options","text":"to_options(l::Legend)\n\ngenerates tikz options related to the legend style: [font={}, rotate={}].\n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Coefplots.to_options-Tuple{Mark, Union{String, Symbol}, Union{String, Symbol}}","page":"Functions","title":"Coefplots.to_options","text":"to_options(l::Mark, mark::Union{Symbol, String}, mark_options::Union{Symbol, String})\n\ngenerates PGF options related to mark: [mark={}, mark_options={fill={}, fill opacity={}, mark size={}, draw={}, draw opacity={}, solid, line width=...}].\n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Coefplots.to_options-Tuple{Note}","page":"Functions","title":"Coefplots.to_options","text":"to_options(l::Legend)\n\ngenerates tikz options related to note: [font={}, rotate={}].\n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Coefplots.to_picture-Tuple{Coefplot, Vararg{Union{Annotation, HBand, HLine, VBand, VLine, rHBand, rHLine, rVBand, rVLine}}}","page":"Functions","title":"Coefplots.to_picture","text":"to_picture(c::Coefplot, other::SupportedAddition ...)\n\nConvert the Coefplot object to an PGFPlotsX.TikzPicture. Other supported components are allowed and appended after the Coefplot.  The note field is drawn as a node beyond the axis.\n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Coefplots.to_picture-Tuple{GroupedCoefplot, Vararg{Union{Annotation, HBand, HLine, VBand, VLine, rHBand, rHLine, rVBand, rVLine}}}","page":"Functions","title":"Coefplots.to_picture","text":"to_picture(g::GroupedCoefplot, other::SupportedAddition ...)\n\nconvert the GroupedCoefplot object to an PGFPlotsX.TikzPicture. Other supported components are allowed and appended after the GroupedCoefplot within the axis.  Note is added.\n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Coefplots.to_picture-Tuple{GroupedMultiCoefplot, Vararg{Union{Annotation, HBand, HLine, VBand, VLine, rHBand, rHLine, rVBand, rVLine}}}","page":"Functions","title":"Coefplots.to_picture","text":"to_picture(m::GroupedMultiCoefplot, other::SupportedAddition ...)\n\nconvert the GroupedMultiCoefplot object to an PGFPlotsX.TikzPicture.  Other supported components are allowed and appended after the GroupedMultiCoefplot within the axis.  Note is added.\n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Coefplots.to_picture-Tuple{MultiCoefplot, Vararg{Union{Annotation, HBand, HLine, VBand, VLine, rHBand, rHLine, rVBand, rVLine}}}","page":"Functions","title":"Coefplots.to_picture","text":"to_picture(m::MultiCoefplot, other::SupportedAddition ...)\n\nconvert the MultiCoefplot object to an PGFPlotsX.TikzPicture.  Other supported components are allowed and appended after the MultiCoefplot within the axis.  Note is added.\n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Coefplots.to_plot-Tuple{Coefplot}","page":"Functions","title":"Coefplots.to_plot","text":"to_plot(c::Coefplot)\n\nConvert the Coefplot object to an PGFPlotsX.AxisElement. It is realized using the PGFPlotsX.Plot/PGFPlotsX.Coordinates combination.\n\n\n\n\n\n","category":"method"}]
}
